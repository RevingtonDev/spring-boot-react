/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'org.springframework.boot' version '3.0.0-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'java'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
        }
    }
}

def props = new Properties();

final def nodeDir = "node.dir"
final def currentDir = file("./").getAbsolutePath()

def buildProperties = file("./build.properties")
if (!buildProperties.exists())
    buildProperties.createNewFile();

buildProperties.withInputStream {props.load(it)}

def nodeNotFound = "npm executable could not found. Either install node.js or define node.js install path in build.properties file as node.dir."

tasks.register("findNodeJS")
tasks.register("buildClient")
tasks.register("buildRelease")
tasks.register("run")

findNodeJS {
    group 'other'
    description "Find nodejs package manager executable."

    doLast {
        def os = System.getProperty("os.name").toLowerCase();

        def command = ""
        if (os.contains("windows")) {
            command += "where"
        } else if (os.contains("linux")) {
            command += "which"
        } else
            throw new Exception(nodeNotFound)

        command += " npm"

        def proc = command.execute()
        List<String> output = new ArrayList<>(), error = new ArrayList<>();

        proc.inputStream.readLines().forEach(output::add)
        proc.errorStream.readLines().forEach(error::add)

        if (error.size() > 0 || output.size() < 1)
            throw new Exception(nodeNotFound)
        else {
            props.setProperty(nodeDir, output.get(output.size() - 1).replace("\\", "/"))
            props.forEach((key, val) -> { buildProperties.write(key + "=" + val) })

            println "npm found at " + props.getProperty(nodeDir)
        }
    }
}

buildClient {
    group 'build'
    description 'Build react application.'

    if (props.getProperty(nodeDir) == null) dependsOn 'findNodeJS'

    dependsOn 'clean'

    def client = file(currentDir + "/../client")
    doFirst {
        if (!client.exists())
            throw new Exception("No react application found.")

        def command = props.getProperty(nodeDir) + " run build --prefix=\"" + client.getAbsolutePath().replace('\\', '/') + "\""
        println "Executing " + command
        def proc = command.execute()
        proc.waitForProcessOutput(System.out, System.err)
        if(proc.exitValue() == 1)
            throw new Exception("React application build failed.")

        copy {
            from client.getAbsolutePath() + "/build"
            def staticDir = "$currentDir/src/main/resources/static"
            if (!file(staticDir).exists()) {
                file(staticDir).mkdir()
            }
            into staticDir
        }
    }

    doLast {
        file(client.getAbsolutePath() + "/build").deleteDir()
    }
}

clean {
    doLast {
        def clientBuildDir = file("$currentDir/src/main/resources/static")
        if (clientBuildDir.exists())
            clientBuildDir.deleteDir()
        clientBuildDir.mkdir()
    }
}

buildRelease {
    group "build"
    description 'Assembles and build both client and server applications.'

    dependsOn 'buildClient', 'bootJar'
    mustRunAfter 'buildClient'
}

run {
    group "application"
    description "Builds the react application and then runs the project."

    dependsOn 'buildClient', 'bootJar'
    mustRunAfter 'buildClient'
}